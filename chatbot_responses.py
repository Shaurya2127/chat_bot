# -*- coding: utf-8 -*-
"""chatbot_responses.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CMdFhALNXxyXrt-DyqsM-c5V1CA1kc1a
"""

import json
import pickle
import random
import numpy as np
import nltk
nltk.download('punkt')
nltk.download('wordnet')
nltk.download('omw-1.4')
import os

# Download 'punkt' to a known location (e.g., /tmp)
nltk.data.path.append('/tmp')
nltk.download('punkt', download_dir='/tmp')
nltk.download('wordnet', download_dir='/tmp')
nltk.download('omw-1.4', download_dir='/tmp')

if not os.path.exists('/tmp/tokenizers/punkt'):
    nltk.download('punkt', download_dir='/tmp')
from nltk.stem import WordNetLemmatizer
from tensorflow.keras.models import load_model


# Load the trained model, intents, words, and classes
lemmatizer = WordNetLemmatizer()
model = load_model("chatbot_model.h5")
intents = json.loads(open("intents.json").read())
words = pickle.load(open("words.pkl", "rb"))
classes = pickle.load(open("classes.pkl", "rb"))

def clean_up_sentence(sentence):
    sentence_words = nltk.word_tokenize(sentence)
    sentence_words = [lemmatizer.lemmatize(word.lower()) for word in sentence_words]
    return sentence_words

def bow(sentence, words):
    sentence_words = clean_up_sentence(sentence)
    bag = [0] * len(words)
    for s in sentence_words:
        for i, w in enumerate(words):
            if w == s:
                bag[i] = 1
    return np.array(bag)

def predict_class(sentence):
    p = bow(sentence, words)
    res = model.predict(np.array([p]))[0]
    ERROR_THRESHOLD = 0.25
    results = [[i, r] for i, r in enumerate(res) if r > ERROR_THRESHOLD]
    results.sort(key=lambda x: x[1], reverse=True)
    return_list = []
    for r in results:
        return_list.append({"intent": classes[r[0]], "probability": str(r[1])})
    return return_list

def get_response(ints, intents_json):
    if not ints:
        return "I'm not sure how to help with that. Could you try rephrasing?"
    tag = ints[0]['intent']
    for i in intents_json['intents']:
        if i['tag'] == tag:
            return random.choice(i['responses'])

