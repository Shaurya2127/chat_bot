# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ulyUPn-5FGL0Pd1hQOcii4H0G8_UvUv0
"""

import streamlit as st
import random
import json
import pickle
import numpy as np
from tensorflow.keras.models import load_model
import nltk

# Load data and model
model = load_model("chatbot_model.h5")
intents = json.loads(open("intents.json").read())
words = pickle.load(open("words.pkl", "rb"))
classes = pickle.load(open("classes.pkl", "rb"))

# Functions
def clean_up_sentence(sentence):
    sentence_words = sentence.lower().split() 
    return sentence_words

def bow(sentence, words):
    sentence_words = clean_up_sentence(sentence)
    bag = [0] * len(words)
    for s in sentence_words:
        for i, w in enumerate(words):
            if w == s:
                bag[i] = 1
    return np.array(bag)

def predict_class(sentence):
    p = bow(sentence, words)
    res = model.predict(np.array([p]))[0]
    ERROR_THRESHOLD = 0.25
    results = [[i, r] for i, r in enumerate(res) if r > ERROR_THRESHOLD]
    results.sort(key=lambda x: x[1], reverse=True)
    return_list = []
    for r in results:
        return_list.append({"intent": classes[r[0]], "probability": str(r[1])})
    return return_list

def get_response(ints, intents_json):
    if not ints:
        return "I'm not sure how to help with that. Could you try rephrasing?"
    tag = ints[0]['intent']
    for i in intents_json['intents']:
        if i['tag'] == tag:
            return random.choice(i['responses'])

# Streamlit app

st.set_page_config(page_title="Student Support Chatbot", page_icon="🤖")
st.title("🎓 Student Support Chatbot")

# Initialize chat history
if "messages" not in st.session_state:
    st.session_state.messages = []

# Display previous messages
for message in st.session_state.messages:
    if message["role"] == "user":
        with st.chat_message("user"):
            st.markdown(message["content"])
    else:
        with st.chat_message("assistant"):
            st.markdown(message["content"])

# Chat input
user_input = st.chat_input("Type your message here...")

if user_input:
    # Display user message
    st.chat_message("user").markdown(user_input)
    st.session_state.messages.append({"role": "user", "content": user_input})

    # Get response
    with st.spinner("Thinking... 🤔"):
        ints = predict_class(user_input)
        res = get_response(ints, intents)
        
    # Display bot message
    st.chat_message("assistant").markdown(res)
    st.session_state.messages.append({"role": "assistant", "content": res})

    # Optional rerun (only if needed for something dynamic)
    # st.rerun()


